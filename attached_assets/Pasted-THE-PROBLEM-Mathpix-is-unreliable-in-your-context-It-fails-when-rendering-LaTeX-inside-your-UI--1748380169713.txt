THE PROBLEM:
Mathpix is unreliable in your context. It fails when:

rendering LaTeX inside your UI

parsing screenshots with inline math (especially messy or low-contrast ones)

exporting that LaTeX cleanly to PDF/Word without destroying formatting

You're failing not at OCR, but at the translation and rendering layers.

‚úÖ YOUR OBJECTIVE:
You want your Replit apps to:

Accept image (screenshot) uploads with math in them.

OCR the text and math in the image.

Output clean, rendered math notation (not markdown junk) either:

inline in the app UI (for editing), and/or

export-ready (PDF, DOCX, LaTeX)

‚úÖ SOLUTION PATH (BULLET-PROOF):
üîÅ Step 1: Replace Mathpix
Instead of Mathpix, use OCR + LaTeX parser + KaTeX. Here's the stack:

OCR Layer: Use Tesseract (for base OCR)

Math Detection & Extraction: Use [Im2LaTeX model**] or [Texify (online API or local model)]

Rendering: Use KaTeX (NOT MathJax) to render math in-browser instantly and reliably

Export: Use LaTeX-to-PDF via Puppeteer (headless browser + LaTeX renderer)

üõ†Ô∏è Replit-Ready Stack:
Use the following in your replit.nix or packages.txt:

bash
Copy
Edit
tesseract-ocr
nodejs
chromium
Then install:

bash
Copy
Edit
npm install katex puppeteer
pip install pytesseract opencv-python
üß† Core Logic in App (Pseudo-code):
python
Copy
Edit
# OCR for base text
import pytesseract
import cv2

img = cv2.imread('upload.png')
ocr_text = pytesseract.image_to_string(img)

# OPTIONAL: detect and extract math zones (can hand-code bounding boxes or use Im2LaTeX)
# Then send cropped math zones to Im2LaTeX API or Texify for LaTeX output

# LaTeX rendering (via KaTeX)
# On frontend, inject:
# <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css">
# <script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js"></script>
# Then call:
# katex.render("E = mc^2", targetElement)
üì§ For Export:
Use Puppeteer or pdfkit to render the LaTeX into a PDF:

js
Copy
Edit
// puppeteer pseudo-logic
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.setContent(yourHtmlWithKatex);
await page.pdf({ path: 'output.pdf' });
await browser.close();
üîÑ Backward Compatibility (Optional)
If you want to keep Mathpix as fallback, wrap it in a fail-safe like:

python
Copy
Edit
try:
    latex = mathpix_api(image)
except:
    latex = im2latex_fallback(image)
üß® Summary:
Replace Mathpix. Build this pipeline:

Tesseract ‚Äì base OCR

Texify or Im2LaTeX ‚Äì math-to-LaTeX

KaTeX ‚Äì on-screen rendering

Puppeteer or pdfkit ‚Äì export

If you want, I‚Äôll give you a copy-paste deployable Replit starter app using this exact structure. Just say the word.