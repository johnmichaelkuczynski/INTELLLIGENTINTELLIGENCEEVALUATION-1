// EXACT INTELLIGENCE PROTOCOL IMPLEMENTATION ACCORDING TO USER SPECIFICATION
// This implements the comprehensive intelligence protocol exactly as specified

const EXACT_INTELLIGENCE_QUESTIONS = `IS IT INSIGHTFUL? 
DOES IT DEVELOP POINTS? (OR, IF IT IS A SHORT EXCERPT, IS THERE EVIDENCE THAT IT WOULD DEVELOP POINTS IF EXTENDED)? 
IS THE ORGANIZATION MERELY SEQUENTIAL (JUST ONE POINT AFTER ANOTHER, LITTLE OR NO LOGICAL SCAFFOLDING)? OR ARE THE IDEAS ARRANGED, NOT JUST SEQUENTIALLY BUT HIERARCHICALLY? 
IF THE POINTS IT MAKES ARE NOT INSIGHTFUL, DOES IT OPERATE SKILLFULLY WITH CANONS OF LOGIC/REASONING. 
ARE THE POINTS CLICHES? OR ARE THEY "FRESH"? 
DOES IT USE TECHNICAL JARGON TO OBFUSCATE OR TO RENDER MORE PRECISE? 
IS IT ORGANIC? DO POINTS DEVELOP IN AN ORGANIC, NATURAL WAY? DO THEY 'UNFOLD'? OR ARE THEY FORCED AND ARTIFICIAL? 
DOES IT OPEN UP NEW DOMAINS? OR, ON THE CONTRARY, DOES IT SHUT OFF INQUIRY (BY CONDITIONALIZING FURTHER DISCUSSION OF THE MATTERS ON ACCEPTANCE OF ITS INTERNAL AND POSSIBLY VERY FAULTY LOGIC)? 
IS IT ACTUALLY INTELLIGENT OR JUST THE WORK OF SOMEBODY WHO, JUDGING BY THE SUBJECT-MATTER, IS PRESUMED TO BE INTELLIGENT (BUT MAY NOT BE)? 
IS IT REAL OR IS IT PHONY? 
DO THE SENTENCES EXHIBIT COMPLEX AND COHERENT INTERNAL LOGIC? 
IS THE PASSAGE GOVERNED BY A STRONG CONCEPT? OR IS THE ONLY ORGANIZATION DRIVEN PURELY BY EXPOSITORY (AS OPPOSED TO EPISTEMIC) NORMS?
IS THERE SYSTEM-LEVEL CONTROL OVER IDEAS? IN OTHER WORDS, DOES THE AUTHOR SEEM TO RECALL WHAT HE SAID EARLIER AND TO BE IN A POSITION TO INTEGRATE IT INTO POINTS HE HAS MADE SINCE THEN? 
ARE THE POINTS 'REAL'? ARE THEY FRESH? OR IS SOME INSTITUTION OR SOME ACCEPTED VEIN OF PROPAGANDA OR ORTHODOXY JUST USING THE AUTHOR AS A MOUTH PIECE?
IS THE WRITING EVASIVE OR DIRECT? 
ARE THE STATEMENTS AMBIGUOUS? 
DOES THE PROGRESSION OF THE TEXT DEVELOP ACCORDING TO WHO SAID WHAT OR ACCORDING TO WHAT ENTAILS OR CONFIRMS WHAT? 
DOES THE AUTHOR USE OTHER AUTHORS TO DEVELOP HIS IDEAS OR TO CLOAK HIS OWN LACK OF IDEAS?

ADDITIONAL CRITICAL QUESTIONS:
ARE THERE TERMS THAT ARE UNDEFINED BUT SHOULD BE DEFINED, IN THE SENSE THAT, WITHOUT DEFINITIONS, IT IS DIFFICULT OR IMPOSSIBLE TO KNOW WHAT IS BEING SAID OR THEREFORE TO EVALUATE WHAT IS BEING SAID?
ARE THERE "FREE VARIABLES" IN THE TEXT? IE ARE THERE QUALIFICATIONS OR POINTS THAT ARE MADE BUT DO NOT CONNECT TO ANYTHING LATER OR EARLIER?
DO NEW STATEMENTS DEVELOP OUT OF OLD ONES? OR ARE THEY MERELY "ADDED" TO PREVIOUS ONES, WITHOUT IN ANY SENSE BEING GENERATED BY THEM?
DO NEW STATEMENTS CLARIFY OR DO THEY LEAD TO MORE LACK OF CLARITY?
IS THE PASSAGE ACTUALLY (PALPABLY) SMART? OR IS ONLY "PRESUMPTION-SMART"?
IF YOUR JUDGMENT IS THAT IT IS INSIGHTFUL, CAN YOU STATEMENT THAT INSIGHT IN A SINGLE SENTENCE?
HOW WELL DOES IT MAKE ITS CASE?
IF I WERE TO GIVE A HIGH SCORE TO THIS PASSAGE, WOULD I BE REWARDING IMPOSTOR SCAFFOLDING?
IF I WERE TO GIVE A HIGH SCORE TO THIS PASSAGE, WOULD I BE REWARDING CONFORMITY TO ACADEMIC/BUREAUCRATIC NORMS?
IF I WERE TO GIVE A LOW SCORE TO THIS PASSAGE, WOULD I BE PENALIZING ACTUAL INTELLIGENCE OWING TO A LACK OF CONFORMITY TO ACADEMIC/BUREAUCRATIC NORMS?`;

const PARADIGM_PSEUDO_INTELLECTUAL_PASSAGE = `In this dissertation, I critically examine the philosophy of transcendental empiricism. Transcendental empiricism is, among other things, a philosophy of mental content. It attempts to dissolve an epistemological dilemma of mental content by splitting the difference between two diametrically opposed accounts of content. John McDowell's minimal empiricism and Richard Gaskin's minimalist empiricism are two versions of transcendental empiricism. Transcendental empiricism itself originates with McDowell's work. This dissertation is divided into five parts. First, in the Introduction, I state the Wittgensteinian metaphilosophical orientation of transcendental empiricism. This metaphilosophical approach provides a plateau upon which much of the rest of this work may be examined. Second, I offer a detailed description of McDowell's minimal empiricism. Third, I critique Gaskin's critique and modification of McDowell's minimal empiricism. I argue that (1) Gaskin's critiques are faulty and that (2) Gaskin's minimalist empiricism is very dubious. Fourth, I scrutinize the alleged credentials of McDowell's minimal empiricism. I argue that McDowell's version of linguistic idealism is problematic. I then comment on a recent dialogue between transcendental empiricism and Hubert Dreyfus's phenomenology. The dialogue culminates with Dreyfus's accusation of the "Myth of the Mental." I argue that this accusation is correct in which case McDowell's direct realism is problematic. I conclude that minimal empiricism does not dissolve the dilemma of mental content. Finally, I argue that Tyler Burge successfully undermines the doctrine of disjunctivism, but disjunctivism is crucial for transcendental empiricism. Ultimately, however, I aim to show that transcendental empiricism is an attractive alternative to philosophies of mental content.`;

// Direct AI API call function
async function callLLMProvider(provider: string, messages: Array<{role: string, content: string}>): Promise<string> {
  const actualProvider = mapZhiToProvider(provider);
  
  if (actualProvider === 'openai') {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: messages,
        max_tokens: 4000,
        temperature: 0.7,
      }),
    });
    
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content;
    
  } else if (actualProvider === 'anthropic') {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': process.env.ANTHROPIC_API_KEY!,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 4000,
        messages: messages
      }),
    });
    
    if (!response.ok) {
      throw new Error(`Anthropic API error: ${response.status}`);
    }
    
    const data = await response.json();
    return data.content[0].text;
    
  } else if (actualProvider === 'deepseek') {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: messages,
        max_tokens: 4000,
      }),
    });
    
    if (!response.ok) {
      throw new Error(`DeepSeek API error: ${response.status}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content;
  }
  
  throw new Error(`Unsupported provider: ${actualProvider}`);
}

function mapZhiToProvider(zhiName: string): string {
  const mapping: Record<string, string> = {
    'zhi1': 'openai',
    'zhi2': 'anthropic', 
    'zhi3': 'deepseek',
  };
  return mapping[zhiName] || zhiName;
}

function extractScore(response: string): number {
  const scoreMatches = response.match(/(?:FINAL SCORE|Score|score):\s*(\d+)(?:\/100)?/i);
  if (scoreMatches) {
    return parseInt(scoreMatches[1]);
  }
  
  const numberMatches = response.match(/(\d+)\/100/g);
  if (numberMatches) {
    const lastMatch = numberMatches[numberMatches.length - 1];
    return parseInt(lastMatch.split('/')[0]);
  }
  
  return 0;
}

// Remove all markdown formatting to display clean text
function cleanMarkdownFormatting(text: string): string {
  if (!text) return '';
  
  return text
    // Remove headers (### ## #) - more aggressive
    .replace(/^#{1,6}\s+(.+)$/gm, '$1')
    // Remove bold (**text** or __text__) - more aggressive  
    .replace(/\*\*([^*\n]+)\*\*/g, '$1')
    .replace(/\*\*([^*]*)\*\*/g, '$1')
    .replace(/__([^_\n]+)__/g, '$1')
    .replace(/__([^_]*)__/g, '$1')
    // Remove italic (*text* or _text_)
    .replace(/\*([^*\n]+)\*/g, '$1')
    .replace(/_([^_\n]+)_/g, '$1')
    // Remove strikethrough (~~text~~)
    .replace(/~~([^~\n]+)~~/g, '$1')
    // Remove code blocks (```text```)
    .replace(/```[\s\S]*?```/g, '')
    // Remove inline code (`text`)
    .replace(/`([^`\n]+)`/g, '$1')
    // Remove links [text](url)
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    // Remove list markers (- or * or numbers) at start of lines
    .replace(/^\s*[-*+]\s+/gm, '')
    .replace(/^\s*\d+\.\s+/gm, '')
    // Remove blockquotes (>)
    .replace(/^\s*>\s+/gm, '')
    // Remove any remaining ** or __ patterns
    .replace(/\*\*/g, '')
    .replace(/__/g, '')
    .replace(/\*/g, '')
    // Clean up extra whitespace and empty lines
    .replace(/\n{3,}/g, '\n\n')
    .replace(/^\s+|\s+$/g, '')
    .trim();
}

// Create intelligent rewrite prompt to maximize scores on protocol questions
function createIntelligentRewritePrompt(text: string, customInstructions?: string): string {
  const customInstructionsSection = customInstructions ? 
    `\n\nADDITIONAL CUSTOM INSTRUCTIONS TO INCORPORATE:\n${customInstructions}\n` : '';

  return `REWRITE THE FOLLOWING TEXT TO MAXIMIZE SCORES ON THESE INTELLIGENCE ASSESSMENT QUESTIONS:

${EXACT_INTELLIGENCE_QUESTIONS}

YOUR TASK: Rewrite the text to score as highly as possible on each of these questions while preserving the core content and meaning as much as possible.

SPECIFIC REWRITING GUIDELINES:
- Make points more insightful and fresh rather than cliched
- Develop points organically with clear logical progression
- Arrange ideas hierarchically, not just sequentially  
- Ensure technical terms are used for precision, not obfuscation
- Make the writing direct rather than evasive
- Eliminate ambiguous statements
- Show system-level control over ideas with clear integration between points
- Ensure progression develops according to logical entailment, not just citation
- Make sentences exhibit complex and coherent internal logic
- Govern the passage with strong conceptual organization
- Open up new domains of inquiry rather than shutting them down
- Ensure authenticity - avoid institutional propaganda or orthodox mouthpiece language
- Define any terms that need definition for clarity
- Eliminate "free variables" - ensure all points connect meaningfully
- Make new statements develop organically from previous ones
- Ensure statements clarify rather than obscure

DO NOT change the fundamental thesis or core arguments. DO preserve factual content. DO make the writing demonstrably more intelligent according to the assessment criteria above.${customInstructionsSection}

ORIGINAL TEXT:
${text}

REWRITTEN TEXT:`;
}

// Create the exact prompt according to the protocol specification
function createIntelligenceAssessmentPrompt(text: string): string {
  return `ANSWER THESE QUESTIONS IN CONNECTION WITH THIS TEXT.

${EXACT_INTELLIGENCE_QUESTIONS}

A score of N/100 (e.g. 73/100) means that (100-N)/100 (e.g. 27/100) outperform the author with respect to the parameter defined by the questions.

YOU ARE NOT GRADING; YOU ARE ANSWERING THESE QUESTIONS. YOU DO NOT USE A RISK-AVERSE STANDARD; YOU DO NOT ATTEMPT TO BE DIPLOMATIC; YOU DO NOT ATTEMPT TO COMPLY WITH RISK-AVERSE, MEDIUM-RANGE IQ, ACADEMIC NORMS. YOU DO NOT MAKE ASSUMPTIONS ABOUT THE LEVEL OF THE PAPER; IT COULD BE A WORK OF THE HIGHEST EXCELLENCE AND GENIUS, OR IT COULD BE THE WORK OF A MORON.

IF A WORK IS A WORK OF GENIUS, YOU SAY THAT, AND YOU SAY WHY; YOU DO NOT SHY AWAY FROM GIVING WHAT MIGHT CONVENTIONALLY BE REGARDED AS EXCESSIVELY "SUPERLATIVE" SCORES; YOU GIVE IT THE SCORE IT DESERVES, NOT THE SCORE THAT A MIDWIT COMMITTEE WOULD SAY IT DESERVES.

THINK VERY VERY VERY HARD ABOUT YOUR ANSWERS; DO NOT DEFAULT TO COOKBOOK, MIDWIT EVALUATION PROTOCOLS.

METAPOINT 1: THIS IS NOT A GRADING APP. YOU ASSESS THE INTELLIGENCE OF WHAT YOU ARE GIVEN. IF YOU ARE GIVEN A BRILLIANT FRAGMENT, YOU GIVE IT A HIGH SCORE. YOU ARE NOT GRADING ESSAYS. YOU ARE NOT LOOKING FOR COMPLETENESS. YOUR JOB IS TO ANSWER THE QUESTIONS, PERIOD, AND TO DO SO ON THE BASIS OF THE TEXT GIVEN, MAKING ZERO ASSUMPTIONS ABOUT WHETHER IT IS COMPLETE OR INCOMPLETE, OR FOR SCHOOL OR FOR SOME OTHER CONTEXT.

METAPOINT 2: DO NOT OVERVALUE TURNS OF PHRASE. AN AUTHOR SPEAKING CONFIDENTLY IS NOT NECESSARILY "SHUTTING DOWN MODES OF INQUIRY". IN FACT, IT IS LIKELY TO BE THE OPPOSITE; BY PUTTING A CLEAR STAKE IN THE GROUND, HE IS PROBABLY OPENING THEM. ANOTHER EXAMPLE: CASUAL SPEECH DOES NOT MEAN DISORGANIZED THOUGHTS. DON'T JUDGE A BOOK BY ITS COVER.

METAPOINT 3: START BY SUMMARIZING THE TEXT AND ALSO CATEGORIZING IT.

METAPOINT 4: DO NOT CHANGE THE EVALUATION BASED ON THE CATEGORY OF THE TEXT: IF A TEXT IS CATEGORIZED AS 'ADVANCED SCHOLARSHIP', IT SHOULD STILL BE EVALUATED WITH RESPECT TO THE GENERAL POPULATION, NOT WITH RESPECT ONLY TO 'ADVANCED SCHOLARLY WORKS.'

METAPOINT 5: THIS IS NOT A GRADING APP. DO NOT PENALIZE BOLDNESS. DO NOT TAKE POINTS AWAY FOR INSIGHTS THAT, IF CORRECT, STAND ON THEIR OWN. GET RID OF THE IDEA THAT "ARGUMENTATION" IS WHAT MAKES SOMETHING SMART; IT ISN'T. WHAT MAKES SOMETHING SMART IS THAT IT IS SMART (INSIGHTFUL). PERIOD.

USE THE FOLLOWING PASSAGE AS A PARADIGM OF A PHONY, PSEUDO-INTELLECTUAL, NOT ACTUALLY INTELLIGENT PASSAGE THAT IS EASILY MISTAKEN FOR BEING ACTUALLY INTELLIGENT (this should score 65 or below):

"${PARADIGM_PSEUDO_INTELLECTUAL_PASSAGE}"

Now answer the questions about this text and give a score out of 100. End with: FINAL SCORE: [number]/100

TEXT:
${text}`;
}

export async function performQuickAnalysis(
  text: string, 
  provider: string = 'deepseek',
  evaluationType: 'intelligence' | 'originality' | 'cogency' | 'overall_quality' = 'intelligence'
) {
  console.log(`EXACT PROTOCOL ${evaluationType.toUpperCase()} ANALYSIS WITH ${provider.toUpperCase()}`);
  
  try {
    const prompt = createIntelligenceAssessmentPrompt(text);
    const response = await callLLMProvider(provider, [
      { role: 'user', content: prompt }
    ]);
    
    const score = extractScore(response);
    const cleanResponse = cleanMarkdownFormatting(response);
    console.log(`${evaluationType} analysis complete - Score: ${score}/100`);
    
    return {
      analysis: cleanResponse,
      intelligence_score: score,
      provider: provider,
      evaluation_type: evaluationType,
      key_insights: cleanResponse,
      cognitive_profile: cleanResponse,
    };
    
  } catch (error) {
    console.error(`${evaluationType} analysis error with ${provider}:`, error);
    throw new Error(`${evaluationType} analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

export async function performQuickComparison(
  documentA: string, 
  documentB: string, 
  provider: string = 'deepseek',
  evaluationType: 'intelligence' | 'originality' | 'cogency' | 'overall_quality' = 'intelligence'
) {
  console.log(`EXACT PROTOCOL COMPARISON - ${evaluationType.toUpperCase()} WITH ${provider.toUpperCase()}`);
  
  try {
    // Analyze both documents using the exact protocol
    const [analysisA, analysisB] = await Promise.all([
      performQuickAnalysis(documentA, provider, evaluationType),
      performQuickAnalysis(documentB, provider, evaluationType)
    ]);
    
    const scoreA = analysisA.intelligence_score;
    const scoreB = analysisB.intelligence_score;
    
    const winnerDocument = scoreA >= scoreB ? 'A' : 'B';
    const scoreDiff = Math.abs(scoreA - scoreB);
    
    // Create proper analysis structures for frontend with clean text
    const cleanAnalysisA = cleanMarkdownFormatting(analysisA.analysis);
    const cleanAnalysisB = cleanMarkdownFormatting(analysisB.analysis);
    
    const resultA = {
      id: Date.now(),
      formattedReport: cleanAnalysisA,
      overallScore: scoreA,
      provider: provider,
      summary: cleanAnalysisA,
      analysis: cleanAnalysisA
    };
    
    const resultB = {
      id: Date.now() + 1,
      formattedReport: cleanAnalysisB,
      overallScore: scoreB,
      provider: provider,
      summary: cleanAnalysisB,
      analysis: cleanAnalysisB
    };
    
    const comparison = {
      documentA: {
        score: scoreA,
        strengths: [`Score: ${scoreA}/100`],
        style: ["Intelligence assessment via exact protocol"]
      },
      documentB: {
        score: scoreB,
        strengths: [`Score: ${scoreB}/100`],
        style: ["Intelligence assessment via exact protocol"]
      },
      comparisonTable: [
        {
          dimension: "Intelligence Score",
          documentA: `${scoreA}/100`,
          documentB: `${scoreB}/100`
        }
      ],
      finalJudgment: `Document ${winnerDocument} demonstrates higher intelligence (${winnerDocument === 'A' ? scoreA : scoreB}/100 vs ${winnerDocument === 'A' ? scoreB : scoreA}/100). Score difference: ${scoreDiff} points.`
    };
    
    console.log(`Comparison complete - Document A: ${scoreA}/100, Document B: ${scoreB}/100, Winner: ${winnerDocument}`);
    
    return {
      analysisA: resultA,
      analysisB: resultB,
      comparison
    };
    
  } catch (error) {
    console.error(`Comparison error with ${provider}:`, error);
    throw new Error(`Comparison failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

export async function performIntelligentRewrite(
  originalText: string,
  customInstructions?: string,
  provider: string = 'deepseek'
) {
  console.log(`INTELLIGENT REWRITE WITH ${provider.toUpperCase()} - OPTIMIZING FOR INTELLIGENCE PROTOCOL`);
  
  try {
    const rewritePrompt = createIntelligentRewritePrompt(originalText, customInstructions);
    const rewrittenText = await callLLMProvider(provider, [
      { role: 'user', content: rewritePrompt }
    ]);
    
    // Clean any markdown formatting from the rewritten text
    const cleanRewrittenText = cleanMarkdownFormatting(rewrittenText);
    
    // Optionally analyze the rewritten text to show improvement
    const newAnalysis = await performQuickAnalysis(cleanRewrittenText, provider, 'intelligence');
    
    console.log(`Intelligent rewrite complete - New score: ${newAnalysis.intelligence_score}/100`);
    
    return {
      originalText: originalText,
      rewrittenText: cleanRewrittenText,
      customInstructions: customInstructions || null,
      provider: provider,
      newAnalysis: newAnalysis,
      improvement: {
        // We don't have the original score here, but the frontend can calculate this
        message: `Text rewritten to maximize intelligence scores. New analysis score: ${newAnalysis.intelligence_score}/100`
      }
    };
    
  } catch (error) {
    console.error(`Intelligent rewrite error with ${provider}:`, error);
    throw new Error(`Intelligent rewrite failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}