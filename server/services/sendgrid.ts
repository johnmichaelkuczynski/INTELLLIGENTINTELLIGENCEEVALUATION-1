import { MailService } from '@sendgrid/mail';
import { ShareViaEmailRequest } from '../../client/src/lib/types';

// Create mail service instance
const mailService = new MailService();

// Email template for a single document analysis (with optional rewrite)
function generateSingleAnalysisEmailHtml(data: ShareViaEmailRequest): string {
  const { analysisA, rewrittenAnalysis } = data;
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background-color: #f8f9fa; padding: 20px; border-bottom: 3px solid #4a6ee0; }
        .content { padding: 20px 0; }
        .footer { color: #666; font-size: 12px; padding-top: 20px; border-top: 1px solid #eee; }
        .dimension { margin-bottom: 15px; padding: 10px; border-left: 3px solid #4a6ee0; background-color: #f8f9fa; }
        .score { font-size: 18px; font-weight: bold; color: #4a6ee0; }
        h2 { color: #333; }
        .quote { font-style: italic; color: #666; border-left: 2px solid #ddd; padding-left: 10px; }
        .rewrite { margin-top: 30px; padding: 20px; border: 1px solid #dee2e6; border-radius: 5px; background-color: #f8f9fa; }
        .rewrite-header { background-color: #e9f7ef; padding: 10px; border-left: 3px solid #28a745; margin-bottom: 15px; }
        .improved-score { color: #28a745; font-weight: bold; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>${rewrittenAnalysis ? 'Document Analysis with Rewrite' : 'Document Analysis Results'}</h1>
        </div>
        <div class="content">
          <h2>Document Analysis Summary</h2>
          <p>${analysisA.summary}</p>
          
          <h2>Intelligence Assessment</h2>
          <p class="score">Overall Score: ${analysisA.overallScore}/100</p>
          <p>${analysisA.overallAssessment}</p>
          
          <h2>Dimension Analysis</h2>
          
          ${Object.entries(analysisA.dimensions).map(([key, dimension]) => `
            <div class="dimension">
              <h3>${dimension.name} - Rating: ${dimension.rating}</h3>
              <p>${dimension.description}</p>
              <div class="quote">"${dimension.quote}"</div>
            </div>
          `).join('')}
          
          ${analysisA.aiDetection ? `
            <h2>AI Detection Results</h2>
            <p>This document has a <strong>${analysisA.aiDetection.probability}% probability</strong> of being AI-generated.</p>
          ` : ''}
          
          ${rewrittenAnalysis ? `
            <div class="rewrite">
              <div class="rewrite-header">
                <h2>Intelligence-Enhanced Rewrite</h2>
                <p>The document has been rewritten to improve semantic compression and logical structure.</p>
              </div>
              
              <h3>Rewrite Intelligence Assessment</h3>
              <p class="score">Rewrite Score: <span class="improved-score">${rewrittenAnalysis.overallScore}/100</span></p>
              <p>${rewrittenAnalysis.summary}</p>
              
              <h3>Improvement Analysis</h3>
              <p>Score change: <strong>${(rewrittenAnalysis.overallScore - analysisA.overallScore).toFixed(1)}</strong> points</p>
              
              ${rewrittenAnalysis.aiDetection ? `
                <h3>AI Detection for Rewrite</h3>
                <p>The rewritten text has a <strong>${rewrittenAnalysis.aiDetection.probability}% probability</strong> of being AI-generated.</p>
              ` : ''}
            </div>
          ` : ''}
        </div>
        <div class="footer">
          <p>This analysis was generated by the Intelligence Analysis Tool.</p>
        </div>
      </div>
    </body>
    </html>
  `;
}

// Email template for a comparison analysis
function generateComparisonEmailHtml(data: ShareViaEmailRequest): string {
  const { analysisA, analysisB, comparison } = data;
  
  if (!analysisB || !comparison) {
    return generateSingleAnalysisEmailHtml(data);
  }
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background-color: #f8f9fa; padding: 20px; border-bottom: 3px solid #4a6ee0; }
        .content { padding: 20px 0; }
        .footer { color: #666; font-size: 12px; padding-top: 20px; border-top: 1px solid #eee; }
        .comparison-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .comparison-table th, .comparison-table td { padding: 10px; border: 1px solid #ddd; text-align: left; }
        .comparison-table th { background-color: #f8f9fa; }
        .document-section { margin-bottom: 30px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .document-score { font-size: 18px; font-weight: bold; color: #4a6ee0; }
        .strengths-list { padding-left: 20px; }
        h2, h3 { color: #333; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>Document Comparison Results</h1>
        </div>
        <div class="content">
          <h2>Comparison Summary</h2>
          <p>${comparison.finalJudgment}</p>
          
          <h2>Document Comparison</h2>
          <table class="comparison-table">
            <tr>
              <th>Dimension</th>
              <th>Document A</th>
              <th>Document B</th>
            </tr>
            ${comparison.comparisonTable.map(row => `
              <tr>
                <td>${row.dimension}</td>
                <td>${row.documentA}</td>
                <td>${row.documentB}</td>
              </tr>
            `).join('')}
          </table>
          
          <div class="document-section">
            <h3>Document A</h3>
            <p class="document-score">Score: ${comparison.documentA.score}/100</p>
            <h4>Strengths:</h4>
            <ul class="strengths-list">
              ${comparison.documentA.strengths.map(strength => `<li>${strength}</li>`).join('')}
            </ul>
            <h4>Summary:</h4>
            <p>${analysisA.summary}</p>
          </div>
          
          <div class="document-section">
            <h3>Document B</h3>
            <p class="document-score">Score: ${comparison.documentB.score}/100</p>
            <h4>Strengths:</h4>
            <ul class="strengths-list">
              ${comparison.documentB.strengths.map(strength => `<li>${strength}</li>`).join('')}
            </ul>
            <h4>Summary:</h4>
            <p>${analysisB.summary}</p>
          </div>
        </div>
        <div class="footer">
          <p>This comparison was generated by the Intelligence Analysis Tool.</p>
        </div>
      </div>
    </body>
    </html>
  `;
}

// Function to send analysis results via email
export async function sendAnalysisViaEmail(
  data: ShareViaEmailRequest
): Promise<boolean> {
  // Check for required SendGrid environment variables
  if (!process.env.SENDGRID_API_KEY) {
    throw new Error("SENDGRID_API_KEY environment variable must be set");
  }
  if (!process.env.SENDGRID_VERIFIED_SENDER) {
    throw new Error("SENDGRID_VERIFIED_SENDER environment variable must be set");
  }
  
  // Set API key for SendGrid
  mailService.setApiKey(process.env.SENDGRID_API_KEY);

  // Determine a default sender email if not provided
  // Make sure we have a valid string for the sender email (not undefined)
  const senderEmail = data.senderEmail || process.env.SENDGRID_VERIFIED_SENDER || '';
  const senderName = data.senderName || 'Intelligence Analysis Tool';

  try {
    // Generate the appropriate email HTML based on document type
    let htmlContent;
    if (data.documentType === 'comparison') {
      htmlContent = generateComparisonEmailHtml(data);
    } else {
      // Both 'single' and 'rewrite' document types use the single analysis template
      // The template will check for rewrittenAnalysis and include it if present
      htmlContent = generateSingleAnalysisEmailHtml(data);
    }
    
    // Define email message
    const msg = {
      to: data.recipientEmail,
      from: {
        email: senderEmail,
        name: senderName
      },
      subject: data.subject,
      html: htmlContent,
    };
    
    // Send email
    await mailService.send(msg);
    return true;
  } catch (error: any) {
    console.error('SendGrid email error:', error);
    
    // Log more details if it's an API response error
    if (error.response && error.response.body && error.response.body.errors) {
      console.error('SendGrid API errors:', JSON.stringify(error.response.body.errors));
    }
    
    throw error;
  }
}