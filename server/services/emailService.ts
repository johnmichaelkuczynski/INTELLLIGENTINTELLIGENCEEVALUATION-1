import { MailService } from '@sendgrid/mail';

// Initialize SendGrid with API key
const mailService = new MailService();
const verifiedSender = process.env.SENDGRID_VERIFIED_SENDER || 'jm@analyticphilosophy.ai';

if (process.env.SENDGRID_API_KEY) {
  mailService.setApiKey(process.env.SENDGRID_API_KEY);
  console.log("SendGrid configuration status:");
  console.log(`- API Key present: ${process.env.SENDGRID_API_KEY ? true : false}`);
  console.log(`- Verified sender: ${verifiedSender}`);
} else {
  console.warn("SENDGRID_API_KEY not found in environment variables");
}

interface EmailParams {
  recipientEmail: string;
  senderEmail?: string;
  senderName?: string;
  subject: string;
  documentType?: string;
  analysisA?: any;
  analysisB?: any;
  comparison?: any;
  rewrittenAnalysis?: any;
}

/**
 * Send an analysis email via SendGrid
 * @param params Email parameters including recipient, subject, and analysis data
 * @returns Success status and message
 */
export async function sendAnalysisEmail(params: EmailParams): Promise<{ success: boolean; message: string }> {
  try {
    const {
      recipientEmail,
      senderEmail = verifiedSender,
      senderName = "Intelligence Analyzer",
      subject,
      documentType = "Document",
      analysisA,
      analysisB,
      comparison,
      rewrittenAnalysis
    } = params;

    // Validate required fields
    if (!recipientEmail || !subject || !analysisA) {
      return {
        success: false,
        message: "Missing required fields: recipient email, subject, and analysis are required"
      };
    }

    // Create HTML content
    let htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1, h2, h3 { color: #2c3e50; }
          .analysis-container { margin-bottom: 30px; border: 1px solid #eaeaea; padding: 15px; border-radius: 5px; }
          .analysis-header { background-color: #f8f9fa; padding: 10px; margin: -15px -15px 15px; border-bottom: 1px solid #eaeaea; border-radius: 5px 5px 0 0; }
          .footer { margin-top: 40px; font-size: 12px; color: #7f8c8d; border-top: 1px solid #eaeaea; padding-top: 10px; }
          .score { font-weight: bold; color: #3498db; }
          pre { white-space: pre-wrap; background-color: #f8f9fa; padding: 10px; border-radius: 3px; }
        </style>
      </head>
      <body>
        <h1>${subject}</h1>
        <p>This email contains the analysis results from the Intelligence Analysis platform.</p>
    `;

    // Add Analysis A
    htmlContent += `
      <div class="analysis-container">
        <div class="analysis-header">
          <h2>${documentType} Analysis</h2>
        </div>
        <div>
          <p><strong>Provider:</strong> ${analysisA.provider || 'AI Analysis'}</p>
          <pre>${analysisA.formattedReport || analysisA.report || 'No analysis available'}</pre>
        </div>
      </div>
    `;

    // Add Analysis B if available
    if (analysisB) {
      htmlContent += `
        <div class="analysis-container">
          <div class="analysis-header">
            <h2>Comparison Document Analysis</h2>
          </div>
          <div>
            <p><strong>Provider:</strong> ${analysisB.provider || 'AI Analysis'}</p>
            <pre>${analysisB.formattedReport || analysisB.report || 'No analysis available'}</pre>
          </div>
        </div>
      `;
    }

    // Add Comparison if available
    if (comparison) {
      htmlContent += `
        <div class="analysis-container">
          <div class="analysis-header">
            <h2>Comparative Analysis</h2>
          </div>
          <div>
            <p><strong>Provider:</strong> ${comparison.provider || 'AI Analysis'}</p>
            <pre>${comparison.formattedReport || comparison.report || 'No comparison available'}</pre>
          </div>
        </div>
      `;
    }

    // Add Rewritten Analysis if available
    if (rewrittenAnalysis) {
      htmlContent += `
        <div class="analysis-container">
          <div class="analysis-header">
            <h2>Rewritten Document</h2>
          </div>
          <div>
            <p><strong>Provider:</strong> ${rewrittenAnalysis.provider || 'AI Rewrite'}</p>
            <pre>${rewrittenAnalysis.content || 'No rewritten content available'}</pre>
          </div>
        </div>
      `;
    }

    // Close HTML
    htmlContent += `
        <div class="footer">
          <p>This analysis was generated by the Intelligence Analysis platform.</p>
          <p>&copy; ${new Date().getFullYear()} Intelligence Analysis. All rights reserved.</p>
        </div>
      </body>
      </html>
    `;

    // Prepare the email
    const msg = {
      to: recipientEmail,
      from: {
        email: senderEmail,
        name: senderName
      },
      subject: subject,
      html: htmlContent,
      text: `
        ${subject}
        
        Document Analysis:
        Provider: ${analysisA.provider || 'AI Analysis'}
        ${analysisA.formattedReport || analysisA.report || 'No analysis available'}
        
        ${analysisB ? `
        Comparison Document Analysis:
        Provider: ${analysisB.provider || 'AI Analysis'}
        ${analysisB.formattedReport || analysisB.report || 'No analysis available'}
        ` : ''}
        
        ${comparison ? `
        Comparative Analysis:
        Provider: ${comparison.provider || 'AI Analysis'}
        ${comparison.formattedReport || comparison.report || 'No comparison available'}
        ` : ''}
        
        ${rewrittenAnalysis ? `
        Rewritten Document:
        Provider: ${rewrittenAnalysis.provider || 'AI Rewrite'}
        ${rewrittenAnalysis.content || 'No rewritten content available'}
        ` : ''}
        
        This analysis was generated by the Intelligence Analysis platform.
      `
    };

    // Send the email
    await mailService.send(msg);

    return {
      success: true,
      message: `Analysis successfully sent to ${recipientEmail}`
    };
  } catch (error: any) {
    console.error("Error sending email:", error);
    return {
      success: false,
      message: `Error sending email: ${error.message}`
    };
  }
}

export default {
  sendAnalysisEmail
};